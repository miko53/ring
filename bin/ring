#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative 'lib/parse_option'
require_relative 'lib/ring_core'
require_relative 'lib/log'

help_msg = <<-HELP_MSG
here we are the list of commands of ring:
 - ring get <url> : retrieve ring configuration
 - ring init <folder> : create a new repo organization
 - ring register <name> <url> <branch> <folder> :
    - insert a new repo inside group of depot at the specifed folder
        if folder is omitted, the repo will be retrieved at the current directory
        if branch is also omitted, it will be considered as default one
 - ring unregister <repo_name> : remove a repository
 - ring list (|repo|tag|action) <action name, with action>:
    - gives the list of repository managed (repo or no parameter)
    - with tag, gives the list of tag of each repository
    - with action, lists the action and command of each repositories
        a action name can be indicated to reduce list at this action
 - ring status : give the status of all repositories inclused in the configuration
 - ring clone : allow to clone all the repostories included in the configuration
 - ring destroy all : allow to remove all cloned repositories
 - ring create action <action_name> : create an action
 - ring insert action <action_name> <repo_name> <commands>
 - ring (execute|exec) <action_name> : execute the specified action for each repo
 - ring tag <tag_name> <msg>: create tag on all repositories and push it
 - ring push : execute push on all repositories
modifiers:
 -s : to simulate the command
 -v : add verbose information
 -vv : add more verbose information (debug)
HELP_MSG

version_msg = 'ring version 0.1'

parser = ParseOption.new
in_error = parser.parse_option(ARGV)

Log.verbose_level = parser.verbose

Log.debug "in_error = #{in_error}"
Log.debug "simulation #{parser.simulate}"
Log.debug "command = #{parser.command}"
Log.debug "argument = #{parser.args}"

if in_error
  Log.display 'wrong command, try help'
else
  case parser.command
  when :init
    RingCore.perform_initialize(parser.args, parser.simulate)
  when :register
    RingCore.perform_register(parser.args, parser.simulate)
  when :unregister
    RingCore.perform_unregister(parser.args, parser.simulate)
  when :list
    RingCore.perform_list
  when :list_tag
    RingCore.perform_list_tag(parser.args, parser.simulate)
  when :list_action
    RingCore.perform_list_action(parser.args, parser.simulate)
  when :help
    Log.display version_msg
    Log.display help_msg
  when :version
    Log.display version_msg
  when :status
    RingCore.perform_status(parser.args, parser.simulate)
  when :clone
    RingCore.perform_clone(parser.args, parser.simulate)
  when :destroy
    RingCore.perform_destroy(parser.args, parser.simulate)
  when :create_action
    RingCore.perform_create_action(parser.args, parser.simulate)
  when :insert_action
    RingCore.perform_insert_action(parser.args, parser.simulate)
  when :execute_action
    RingCore.perform_execute_action(parser.args, parser.simulate)
  when :tag
    RingCore.perform_tag(parser.args, parser.simulate)
  when :push
    RingCore.perform_push(parser.args, parser.simulate)
  when :commit
    # not implemented
  when :get
    RingCore.perform_get(parser.args, parser.simulate)
  end
end
